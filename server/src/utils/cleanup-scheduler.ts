import { cleanupExpiredAuthData, cleanupOldUserSessions } from '../db/auth-queries.js';
import { logger } from './logger.js';
import { env } from '../load-env.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
const CLEANUP_INTERVAL_HOURS = 24; // –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
const USER_SESSION_CLEANUP_LIMIT = 10; // –û—Å—Ç–∞–≤–ª—è—Ç—å –º–∞–∫—Å–∏–º—É–º 5 —Å–µ—Å—Å–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
let isCleanupRunning = false;

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏
export class CleanupScheduler {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  start(): void {
    if (this.isRunning) {
      logger.info('Cleanup scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    logger.info(`–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${CLEANUP_INTERVAL_HOURS} —á–∞—Å–æ–≤)`);

    // –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    this.runCleanup().catch(error => {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.intervalId = setInterval(() => {
      this.runCleanup().catch(error => {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
      });
    }, CLEANUP_INTERVAL_HOURS * 60 * 60 * 1000);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    logger.info('Cleanup scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
  async runCleanup(): Promise<{ sessions: number; magicTokens: number; figmaCodes: number; total: number }> {
    if (isCleanupRunning) {
      logger.warn('–û—á–∏—Å—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      throw new Error('Cleanup already running');
    }

    isCleanupRunning = true;

    try {
      logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

      const result = cleanupExpiredAuthData();

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.cleanupOldUserSessions();

      logger.info(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.total}`);

      return result;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
      throw error;
    } finally {
      isCleanupRunning = false;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private async cleanupOldUserSessions(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
      const { getDatabase } = await import('../db/init.js');
      const db = getDatabase();

      const users = db.prepare(`
        SELECT DISTINCT user_id FROM sessions
      `).all() as { user_id: string }[];

      let totalCleaned = 0;

      for (const { user_id } of users) {
        const cleaned = cleanupOldUserSessions(user_id, USER_SESSION_CLEANUP_LIMIT);
        totalCleaned += cleaned;
      }

      if (totalCleaned > 0) {
        logger.info(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalCleaned}`);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  getStatus(): { isRunning: boolean; nextCleanup?: Date } {
    return {
      isRunning: this.isRunning,
      nextCleanup: this.intervalId ? new Date(Date.now() + CLEANUP_INTERVAL_HOURS * 60 * 60 * 1000) : undefined
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export const cleanupScheduler = new CleanupScheduler();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
export async function runManualCleanup(): Promise<{ sessions: number; magicTokens: number; figmaCodes: number; total: number }> {
  return cleanupScheduler.runCleanup();
}

export function startCleanupScheduler(): void {
  cleanupScheduler.start();
}

export function stopCleanupScheduler(): void {
  cleanupScheduler.stop();
}

export function getCleanupStatus() {
  return cleanupScheduler.getStatus();
}
