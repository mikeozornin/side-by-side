import { initDatabase, closeDatabase, getDatabase } from './init.js';
import { getAllVotings, getVotesForVoting } from './queries.js';
import { logger } from '../utils/logger.js';

interface CompatibilityCheck {
  test: string;
  passed: boolean;
  message: string;
}

async function checkTableExists(db: any, tableName: string): Promise<boolean> {
  try {
    const DB_PROVIDER = process.env.DB_PROVIDER || 'sqlite';
    if (DB_PROVIDER === 'postgres') {
        const res = await db.query(`SELECT to_regclass(?) as name`, [`public.${tableName}`]);
        return res[0].name === tableName;
    } else {
        const res = await db.get(`SELECT name FROM sqlite_master WHERE type='table' AND name=?`, [tableName]);
        return !!res;
    }
  } catch (e) {
    return false;
  }
}

async function checkBackwardCompatibility(): Promise<void> {
  const checks: CompatibilityCheck[] = [];
  
  try {
    logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    const db = getDatabase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±–µ–∑ user_id –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±–µ–∑ user_id');
    const votings = await getAllVotings();
    const anonymousVotings = votings.filter(v => !v.user_id);
    checks.push({
      test: '–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
      passed: anonymousVotings.length >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${anonymousVotings.length} –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å user_id –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å user_id');
    const userVotings = votings.filter(v => v.user_id);
    checks.push({
      test: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      passed: userVotings.length >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${userVotings.length} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ì–æ–ª–æ—Å–∞ –±–µ–∑ user_id –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞');
    let anonymousVotes = 0;
    for (const voting of votings) {
      const votes = await getVotesForVoting(voting.id);
      anonymousVotes += votes.filter(v => !v.user_id).length;
    }
    checks.push({
      test: '–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞',
      passed: anonymousVotes >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${anonymousVotes} –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ì–æ–ª–æ—Å–∞ —Å user_id –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ì–æ–ª–æ—Å–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
    let userVotes = 0;
    for (const voting of votings) {
      const votes = await getVotesForVoting(voting.id);
      userVotes += votes.filter(v => v.user_id).length;
    }
    checks.push({
      test: '–ì–æ–ª–æ—Å–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      passed: userVotes >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${userVotes} –≥–æ–ª–æ—Å–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—É–±–ª–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—É–±–ª–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    const publicVotings = votings.filter(v => v.is_public);
    checks.push({
      test: '–ü—É–±–ª–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
      passed: publicVotings.length >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${publicVotings.length} –ø—É–±–ª–∏—á–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    const privateVotings = votings.filter(v => !v.is_public);
    checks.push({
      test: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
      passed: privateVotings.length >= 0,
      message: `–ù–∞–π–¥–µ–Ω–æ ${privateVotings.length} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π`
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –¢–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    const authTables = ['users', 'sessions', 'magic_tokens', 'figma_auth_codes'];
    const missingTables: string[] = [];
    for (const table of authTables) {
      if (!await checkTableExists(db, table)) {
        missingTables.push(table);
      }
    }
    
    checks.push({
      test: '–¢–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      passed: missingTables.length === 0,
      message: missingTables.length === 0 
        ? '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
        : `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===');
    checks.forEach(check => {
      const status = check.passed ? '‚úÖ' : '‚ùå';
      logger.info(`${status} ${check.test}: ${check.message}`);
    });
    
    const allPassed = checks.every(check => check.passed);
    if (allPassed) {
      logger.info('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º.');
    } else {
      logger.error('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
    throw error;
  } finally {
    closeDatabase();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  checkBackwardCompatibility()
    .then(() => {
      logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      process.exit(1);
    });
}

export { checkBackwardCompatibility };
