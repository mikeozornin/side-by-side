---
- name: Bootstrap server for Side-by-Side Voting
  hosts: web
  become: true
  vars:
    nginx_site_path: "/etc/nginx/sites-available/{{ domain }}"
    nginx_site_link: "/etc/nginx/sites-enabled/{{ domain }}"
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install system dependencies for Bun
      apt:
        name:
          - curl
          - wget
          - unzip
          - ca-certificates
          - build-essential
          - git
          - python3-dev
          - libc6-dev
        state: present

    - name: Remove old Node.js packages completely
      apt:
        name:
          - nodejs
          - npm
          - libnode-dev
          - libnode72
          - node-gyp
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Clean up any remaining Node.js files
      shell: |
        rm -rf /usr/include/node
        rm -rf /usr/lib/node_modules
        rm -rf /usr/share/node
        rm -rf /var/lib/nodejs
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Clean apt cache after removal
      command: apt-get autoremove -y
      ignore_errors: yes

    - name: Install Bun
      shell: |
        set -e
        echo "üîç Checking system dependencies..."
        which curl || echo "curl not found"
        which wget || echo "wget not found" 
        which unzip || echo "unzip not found"
        
        echo "‚¨áÔ∏è Downloading and installing Bun..."
        # Try curl first, then wget as fallback
        if command -v curl >/dev/null 2>&1; then
          echo "Using curl..."
          curl -fsSL https://bun.sh/install | bash
        else
          echo "Using wget..."
          wget -qO- https://bun.sh/install | bash
        fi
        
        echo "‚è≥ Waiting for installation to complete..."
        sleep 5
        
        echo "üîó Creating symlink..."
        export PATH="$HOME/.bun/bin:$PATH"
        ln -sf /root/.bun/bin/bun /usr/local/bin/bun
        chmod +x /usr/local/bin/bun
        
        echo "‚úÖ Verifying installation..."
        /usr/local/bin/bun --version
        echo "üéâ Bun installation completed successfully!"
      args:
        executable: /bin/bash

    - name: Add Bun to PATH for current session
      shell: |
        echo 'export PATH="$HOME/.bun/bin:$PATH"' >> /root/.bashrc
        source /root/.bashrc
      args:
        executable: /bin/bash

    - name: Check if Bun binary exists
      stat:
        path: /usr/local/bin/bun
      register: bun_binary

    - name: Verify Bun installation
      shell: /usr/local/bin/bun --version
      register: bun_version
      changed_when: false
      when: bun_binary.stat.exists

    - name: Display Bun version
      debug:
        msg: "Bun version: {{ bun_version.stdout }}"
      when: bun_binary.stat.exists

    - name: Ensure bun binary is accessible by www-data
      shell: |
        # –ï—Å–ª–∏ bun - —ç—Ç–æ —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ /root/.bun/bin/bun, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        if [ -L /usr/local/bin/bun ] && [ "$(readlink /usr/local/bin/bun)" = "/root/.bun/bin/bun" ]; then
          rm /usr/local/bin/bun
          cp /root/.bun/bin/bun /usr/local/bin/bun
          chmod +x /usr/local/bin/bun
          chown root:root /usr/local/bin/bun
        fi
      args:
        executable: /bin/bash
      when: bun_binary.stat.exists

    - name: Fail if Bun not installed
      fail:
        msg: "Bun installation failed. Please check the installation script."
      when: not bun_binary.stat.exists

    - name: Install PostgreSQL client if needed
      apt:
        name: postgresql-client
        state: present
      when: db_provider == 'postgres'

    - name: Install system dependencies for image optimization
      apt:
        name: "{{ image_optimization_packages }}"
        state: present

    - name: Install certbot for Let's Encrypt
      apt:
        name: 
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Ensure base directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        group: www-data
        mode: "0755"
      loop:
        - "{{ release_root }}"
        - "{{ current_link | dirname }}"
        - "{{ nginx_web_root | dirname }}"

    - name: Ensure data and logs directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        group: www-data
        mode: "0755"
      loop:
        - "{{ current_link | dirname }}/data"
        - "{{ current_link | dirname }}/logs"

    - name: Ensure env directory exists
      file:
        path: "{{ env_file_path | dirname }}"
        state: directory
        owner: root
        group: www-data
        mode: "0750"

    - name: Place systemd unit
      copy:
        dest: "/etc/systemd/system/{{ service_name }}.service"
        owner: root
        group: root
        mode: "0644"
        content: |
          [Unit]
          Description=Side-by-Side Voting API
          After=network.target

          [Service]
          WorkingDirectory={{ backend_workdir }}
          ExecStart=/usr/local/bin/bun dist/index.js
          EnvironmentFile={{ env_file_path }}
          Restart=always
          RestartSec=5
          User=www-data
          Group=www-data

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      command: systemctl daemon-reload

    - name: Enable service on boot
      systemd:
        name: "{{ service_name }}"
        enabled: true

    - name: Place nginx site config
      copy:
        dest: "{{ nginx_site_path }}"
        owner: root
        group: root
        mode: "0644"
        content: |
          server {
              listen 80;
              server_name {{ domain }};

              # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ 20MB)
              client_max_body_size 300M;

              root {{ nginx_web_root }};
              index index.html;

              # API
              location {{ api_prefix }}/ {
                  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ 300MB (–¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ 20MB)
                  client_max_body_size 300M;
                  
                  proxy_pass http://{{ host_bind }}:{{ port }}{{ api_prefix }}/;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º Origin –∏ preflight –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ backend (CORS —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º)
                  proxy_set_header Origin $http_origin;
                  proxy_set_header Access-Control-Request-Method $http_access_control_request_method;
                  proxy_set_header Access-Control-Request-Headers $http_access_control_request_headers;

                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_read_timeout 600s;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 600s;
              }

              # Health check
              location = {{ health_path }} {
                  proxy_pass http://{{ host_bind }}:{{ port }}{{ health_path }};
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
              }

              # Cache immutable assets (Vite) - –ò–°–ö–õ–Æ–ß–ê–ï–ú /api/ –ø—É—Ç–∏
              location ~* ^(?!\/api\/).*\.(js|css|png|jpg|jpeg|gif|svg|ico|webp|woff2?)$ {
                  expires 1y;
                  add_header Cache-Control "public, max-age=31536000, immutable";
                  try_files $uri =404;
              }

              # Do not cache index.html
              location = /index.html {
                  add_header Cache-Control "no-cache";
              }

              # SPA fallback - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
              location / {
                  try_files $uri /index.html;
              }
          }

    - name: Enable nginx site
      file:
        src: "{{ nginx_site_path }}"
        dest: "{{ nginx_site_link }}"
        state: link

    - name: Test nginx config
      command: nginx -t

    - name: Reload nginx
      service:
        name: nginx
        state: reloaded

    - name: Obtain Let's Encrypt SSL certificate
      command: >
        certbot --nginx 
        -d {{ domain }} 
        --non-interactive 
        --agree-tos 
        --email {{ ssl_email }}
        --redirect
      register: certbot_result
      ignore_errors: yes

    - name: Display SSL certificate status
      debug:
        msg: |
          SSL certificate status:
          {% if certbot_result.rc == 0 %}
          ‚úÖ SSL certificate obtained successfully!
          {% else %}
          ‚ö†Ô∏è  SSL certificate not obtained. You may need to:
          1. Ensure domain {{ domain }} points to this server
          2. Run manually: certbot --nginx -d {{ domain }}
          {% endif %}

    - name: Setup automatic SSL certificate renewal
      cron:
        name: "Renew Let's Encrypt SSL certificates"
        job: "0 12 * * * /usr/bin/certbot renew --quiet"
        user: root

    - name: Ensure env file exists with secure perms (placeholder)
      copy:
        dest: "{{ env_file_path }}"
        content: |
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          DATA_DIR={{ current_link | dirname }}/data
          LOG_DIR={{ current_link | dirname }}/logs
          DB_PATH={{ current_link | dirname }}/app.db
          PORT={{ port }}
          BASE_URL=https://{{ domain }}
          NODE_ENV=production

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          DB_PROVIDER={{ db_provider }}
          DB_PATH={{ current_link | dirname }}/app.db
          DATABASE_URL={{ database_url }}

          # URL –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å)
          VOTING_BASE_URL=https://{{ domain }}

          # URL –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ (–¥–ª—è magic links)
          CLIENT_URL=https://{{ domain }}

          # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
          # development - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (API –Ω–∞ /api, –∫–ª–∏–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ)
          # production - –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (API –Ω–∞ /api, –∫–ª–∏–µ–Ω—Ç –Ω–∞ /)
          SERVER_MODE=production

          # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç—ã
          # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (ru/en)
          NOTIFICATIONS_LOCALE=ru

          # Mattermost –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
          MATTERMOST_ENABLED=false
          # MATTERMOST_WEBHOOK_URL=https://your-mattermost-server.com/hooks/your-webhook-id

          # Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ)
          TELEGRAM_ENABLED=false
          # TELEGRAM_BOT_TOKEN=your-bot-token
          # TELEGRAM_CHAT_ID=your-chat-id

          # Web Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          WEB_PUSH_ENABLED={{ web_push_enabled | lower }}
          # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥–æ–π: npx web-push generate-vapid-keys
          VAPID_PUBLIC_KEY={{ vapid_public_key }}
          VAPID_PRIVATE_KEY={{ vapid_private_key }}
          VAPID_EMAIL={{ vapid_email }}

          # Rate Limiting
          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
          RATE_LIMIT_VOTING_PER_MINUTE=6
          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
          RATE_LIMIT_VOTING_PER_HOUR=60
          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ magic link –∑–∞ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
          RATE_LIMIT_AUTH_MAGIC_LINK_PER_MINUTE=5
          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∑–∞ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
          RATE_LIMIT_AUTH_VERIFY_TOKEN_PER_MINUTE=5

          # JWT —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤
          # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á!
          JWT_SECRET=CHANGE_ME_IN_PRODUCTION_USE_STRONG_RANDOM_KEY

          # –†–µ–∂–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          # anonymous - –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∫—Ç–æ —É–≥–æ–¥–Ω–æ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å)
          # magic-links - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ magic links
          AUTH_MODE={{ auth_mode }}

          # –ê–≤—Ç–æ–∞–ø—Ä—É–≤ —Å–µ—Å—Å–∏–π –≤ dev —Ä–µ–∂–∏–º–µ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
          # true - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ magic link
          # false - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç magic link –∫–∞–∫ –æ–±—ã—á–Ω–æ
          AUTO_APPROVE_SESSIONS=false

          # SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ magic link'–æ–≤
          # –ü–æ—Ä—Ç –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å - –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ö–æ—Å—Ç—É
          # SMTP_HOST=your-smtp-server.com
          # SMTP_PORT=587  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: 587 (STARTTLS), 465 (SSL), –∏–ª–∏ 0 –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
          # SMTP_USER=your-smtp-username
          # SMTP_PASS=your-smtp-password
          # SMTP_FROM_EMAIL=noreply@your-domain.com
        owner: root
        group: www-data
        mode: "0640"
        force: no

    - name: Display next steps
      debug:
        msg: |
          Bootstrap completed! Next steps:
          1. Update /etc/side-by-side/server.env with your real configuration:
             - Generate a strong JWT_SECRET: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
             - Configure SMTP settings for magic links
             - Set up notification webhooks if needed
          2. Run the deploy playbook to deploy your application:
             ansible-playbook -i ansible/inventory.ini ansible/deploy.yml -e restart_service=true
